<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>workflow Learning</title>
      <link href="/2024/02/02/WorkFlow%20Learning%20Part%201/"/>
      <url>/2024/02/02/WorkFlow%20Learning%20Part%201/</url>
      
        <content type="html"><![CDATA[<h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><h2 id="创建一个任务-wget"><a href="#创建一个任务-wget" class="headerlink" title="创建一个任务 wget"></a>创建一个任务 wget</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">WFHttpTask *<span class="title">create_http_task</span><span class="params">(<span class="type">const</span> std::string&amp; url,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">int</span> redirect_max, <span class="type">int</span> retry_max,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">http_callback_t</span> callback)</span></span>;</span><br></pre></td></tr></table></figure><p>创建启动 HTTP 任务</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WFHttpTask *task = WFTaskFactory::<span class="built_in">create_http_task</span>(url, REDIRECT_MAX, RETRY_MAX, wget_callback);</span><br><span class="line">protocol::HttpRequest *req = task-&gt;<span class="built_in">get_req</span>();</span><br><span class="line">req-&gt;<span class="built_in">add_header_pair</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">req-&gt;<span class="built_in">add_header_pair</span>(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Wget/1.14 (gnu-linux)&quot;</span>);</span><br><span class="line">req-&gt;<span class="built_in">add_header_pair</span>(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;close&quot;</span>);</span><br><span class="line">task-&gt;<span class="built_in">start</span>();</span><br><span class="line"><span class="built_in">pause</span>();</span><br></pre></td></tr></table></figure><p>对于 http_callback_t 回调函数</p><p>处理 HTTP 结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">wget_callback</span><span class="params">(WFHttpTask *task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    protocol::HttpRequest *req = task-&gt;<span class="built_in">get_req</span>();</span><br><span class="line">    protocol::HttpResponse *resp = task-&gt;<span class="built_in">get_resp</span>();</span><br><span class="line">    <span class="type">int</span> state = task-&gt;<span class="built_in">get_state</span>();</span><br><span class="line">    <span class="type">int</span> error = task-&gt;<span class="built_in">get_error</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// handle error states</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    std::string name;</span><br><span class="line">    std::string value;</span><br><span class="line">    <span class="comment">// print request to stderr</span></span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s %s %s\r\n&quot;</span>, req-&gt;<span class="built_in">get_method</span>(), req-&gt;<span class="built_in">get_http_version</span>(), req-&gt;<span class="built_in">get_request_uri</span>());</span><br><span class="line">    <span class="function">protocol::HttpHeaderCursor <span class="title">req_cursor</span><span class="params">(req)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (req_cursor.<span class="built_in">next</span>(name, value))</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;%s: %s\r\n&quot;</span>, name.<span class="built_in">c_str</span>(), value.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print response header to stderr</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print response body to stdin</span></span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *body;</span><br><span class="line">    <span class="type">size_t</span> body_len;</span><br><span class="line">    resp-&gt;<span class="built_in">get_parsed_body</span>(&amp;body, &amp;body_len); <span class="comment">// always success. 处理原始chunk不解码</span></span><br><span class="line">    <span class="built_in">fwrite</span>(body, <span class="number">1</span>, body_len, stdout);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现-redis-读出和写入"><a href="#实现-redis-读出和写入" class="headerlink" title="实现 redis 读出和写入"></a>实现 redis 读出和写入</h2><p>与创建 HTTP 区别在于没有 redirect_max 参数的设置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="type">redis_callback_t</span> = std::function&lt;<span class="built_in">void</span> (WFRedisTask *)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">WFRedisTask *<span class="title">create_redis_task</span><span class="params">(<span class="type">const</span> std::string&amp; url,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="type">int</span> retry_max,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="type">redis_callback_t</span> callback)</span></span>;</span><br></pre></td></tr></table></figure><p>对于在 Redis task 中存储一些 KV 数据，workflow 采用使用 task 的一个 public 成员来存储 task -&gt; use_data</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tutorial_task_data</span></span><br><span class="line">&#123;</span><br><span class="line">    std::sring url;</span><br><span class="line">    std::string key;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tutorial_task_data</span> data;</span><br><span class="line">data.url = argv[<span class="number">1</span>];</span><br><span class="line">data.key = argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">WFRedisTask *task = WFTaskFactory::<span class="built_in">create_redis_task</span>(data.url, RETRY_MAX, redis_callback);</span><br><span class="line"></span><br><span class="line">protocol::RedisRequest *req = task-&gt;<span class="built_in">get_req</span>();</span><br><span class="line">req-&gt;<span class="built_in">set_request</span>(<span class="string">&quot;SET&quot;</span>, &#123; data.key, argv[<span class="number">3</span>] &#125;);</span><br><span class="line"></span><br><span class="line">task-&gt;user_data = &amp;data;</span><br><span class="line">task-&gt;<span class="built_in">start</span>();</span><br><span class="line"><span class="built_in">pause</span>();</span><br></pre></td></tr></table></figure><p>处理请求结果<br>SET 后 GET 验证结果，同时如果想在一个任务后启动下一个任务，一般是使用 push_back 来完成，一是保证 log 顺序，二是如果使用 start 来启动，就相当于开启了一个新的 series</p><h2 id="wget-to-redis"><a href="#wget-to-redis" class="headerlink" title="wget_to_redis"></a>wget_to_redis</h2><p>使用 series 来管理上下文</p><h2 id="Http-echo-server-的业务逻辑"><a href="#Http-echo-server-的业务逻辑" class="headerlink" title="Http echo server 的业务逻辑"></a>Http echo server 的业务逻辑</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="type">http_process_t</span> = std::function&lt;<span class="built_in">void</span> (WFHttpTask *)&gt;;</span><br><span class="line"><span class="keyword">using</span> WFHttpServer = WFServer&lt;protocol::HttpRequest, protocol::HttpResponse&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line">WFHttpServer::<span class="built_in">WFServer</span>(<span class="type">http_process_t</span> proc) :</span><br><span class="line">    <span class="built_in">WFServerBase</span>(&amp;HTTP_SERVER_PARAMS_DEFAULT),</span><br><span class="line">    <span class="built_in">process</span>(std::<span class="built_in">move</span>(proc))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 process 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(WFHttpTask *server_task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    protocol::HttpRequest *req = server_task-&gt;<span class="built_in">get_req</span>();</span><br><span class="line">    protocol::HttpResponse *resp = server_task-&gt;<span class="built_in">get_resp</span>();</span><br><span class="line">    <span class="type">long</span> seq = server_task-&gt;<span class="built_in">get_task_seq</span>();</span><br><span class="line">    <span class="function">protocol::HttpHeaderCursor <span class="title">cursor</span><span class="params">(req)</span></span>;</span><br><span class="line">    std::string name;</span><br><span class="line">    std::string value;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">8192</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set response message body. */</span></span><br><span class="line">    resp-&gt;<span class="built_in">append_output_body_nocopy</span>(<span class="string">&quot;&lt;html&gt;&quot;</span>, <span class="number">6</span>);</span><br><span class="line">    len = <span class="built_in">snprintf</span>(buf, <span class="number">8192</span>, <span class="string">&quot;&lt;p&gt;%s %s %s&lt;/p&gt;&quot;</span>, req-&gt;<span class="built_in">get_method</span>(),</span><br><span class="line">                   req-&gt;<span class="built_in">get_request_uri</span>(), req-&gt;<span class="built_in">get_http_version</span>());</span><br><span class="line">    resp-&gt;<span class="built_in">append_output_body</span>(buf, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cursor.<span class="built_in">next</span>(name, value))</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">snprintf</span>(buf, <span class="number">8192</span>, <span class="string">&quot;&lt;p&gt;%s: %s&lt;/p&gt;&quot;</span>, name.<span class="built_in">c_str</span>(), value.<span class="built_in">c_str</span>());</span><br><span class="line">        resp-&gt;<span class="built_in">append_output_body</span>(buf, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resp-&gt;<span class="built_in">append_output_body_nocopy</span>(<span class="string">&quot;&lt;/html&gt;&quot;</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set status line if you like. */</span></span><br><span class="line">    resp-&gt;<span class="built_in">set_http_version</span>(<span class="string">&quot;HTTP/1.1&quot;</span>);</span><br><span class="line">    resp-&gt;<span class="built_in">set_status_code</span>(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">    resp-&gt;<span class="built_in">set_reason_phrase</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"></span><br><span class="line">    resp-&gt;<span class="built_in">add_header_pair</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    resp-&gt;<span class="built_in">add_header_pair</span>(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;Sogou WFHttpServer&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (seq == <span class="number">9</span>) <span class="comment">/* no more than 10 requests on the same connection. */</span></span><br><span class="line">        resp-&gt;<span class="built_in">add_header_pair</span>(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;close&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print log</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/01/11/C++%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/01/11/C++%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="基于锁的并发数据结构"><a href="#基于锁的并发数据结构" class="headerlink" title="基于锁的并发数据结构"></a>基于锁的并发数据结构</h2><h2 id="无锁并发的数据结构"><a href="#无锁并发的数据结构" class="headerlink" title="无锁并发的数据结构"></a>无锁并发的数据结构</h2><h2 id="高级线程管理"><a href="#高级线程管理" class="headerlink" title="高级线程管理"></a>高级线程管理</h2><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><h2 id="Openappsec-LruCacheMap"><a href="#Openappsec-LruCacheMap" class="headerlink" title="Openappsec LruCacheMap"></a>Openappsec LruCacheMap</h2><p>源码：<a href="https://github.com/openappsec/openappsec/blob/main/components/security_apps/waap/waap_clib/lru_cache_map.h">https://github.com/openappsec/openappsec/blob/main/components/security_apps/waap/waap_clib/lru_cache_map.h</a></p><h2 id="Openappsec-LruCacheSet"><a href="#Openappsec-LruCacheSet" class="headerlink" title="Openappsec LruCacheSet"></a>Openappsec LruCacheSet</h2><p>源码：<a href="https://github.com/openappsec/openappsec/blob/main/components/security_apps/waap/waap_clib/lru_cache_set.h">https://github.com/openappsec/openappsec/blob/main/components/security_apps/waap/waap_clib/lru_cache_set.h</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
